buildscript {
  repositories {
    maven { url uri('/tmp/repo') }
    mavenLocal()
    mavenCentral()
    maven { url "http://maven.restlet.org" }
  }

  dependencies {
    classpath fileTree(dir: 'lib').include("*.jar")
    classpath group: 'org.docbook', name: 'docbook-xsl-java-saxon', version: '1.2.0-96'
    classpath group: 'org.docbook', name: 'docbook-xslt2', version: '2.2.2'
    classpath group: 'org.docbook', name: 'docbook-schemas', version: '5.1-1'
    classpath group: 'com.xmlcalabash', name: 'xmlcalabash1-ditaa', version: '1.1.3'
    classpath group: 'com.xmlcalabash', name: 'xmlcalabash1-gradle', version: '1.3.3'
    classpath group: 'com.xmlcalabash', name: 'xmlcalabash1-ditaa', version: '1.1.3'
    classpath group: 'com.xmlcalabash', name: 'xmlcalabash1-plantuml', version: '1.1.3'
    classpath group: 'com.xmlcalabash', name: 'xmlcalabash1-mathml-to-svg', version: '1.1.3'
    classpath group: 'com.xmlcalabash', name: 'xmlcalabash1-pegdown', version: '1.1.1'
    classpath group: 'com.xmlcalabash', name: 'xmlcalabash', version: '1.1.19-98'
    classpath group: 'org.xmlresolver', name: 'xmlresolver', version: '0.13.1'
  }
}

plugins {
  id "java"
}

apply plugin: 'org.docbook.task'
apply plugin: 'com.xmlcalabash.task'

import org.docbook.DocBookTask
import com.xmlcalabash.XMLCalabashTask

repositories {
  maven { url uri('/tmp/repo') }
  mavenLocal()
  mavenCentral()
  maven { url "http://maven.restlet.org" }
}

dependencies {
  compile fileTree(dir: 'lib').include("*.jar")
  compile (
    [group: 'com.xmlcalabash', name: 'xmlcalabash', version: '1.1.19-98'],
    [group: 'net.sf.saxon', name: 'Saxon-HE', version: '9.8.0-8']
  )
}

task formatBook(type: DocBookTask) {
  input("source", "src/main/xml/ref.xml")
  pipeline("src/main/resources/style/format.xpl")
}

/*
  args('-D',
       '-Xxpointer-on-text',
       '-isource=src/main/xml/ref.xml',
       'src/main/resources/style/format.xpl')
*/

formatBook.onlyIf {
  FileCollection src = fileTree(dir: 'src/main')
  FileCollection ref = fileTree(dir: 'build/ref')

  boolean built = file("$buildDir/ref/index.html").exists()
  String srcName
  long newestSrc = -1
  String refName
  long newestRef = -1

  src.each {
    File file ->
      if (newestSrc < file.lastModified()) {
        srcName = file.name
        newestSrc = file.lastModified()
      }
  }

  ref.each {
    File file ->
      if (newestRef < file.lastModified()) {
        refName = file.name
        newestRef = file.lastModified()
      }
  }

  return !built || (newestSrc > newestRef)
}

task copyCSS(type: Copy) {
  from 'src/main/resources/css'
  into 'build/ref/css'
}

task copyJS(type: Copy) {
  from 'src/main/resources/js'
  into 'build/ref/js'
}

task copyImages(type: Copy) {
  from 'src/main/resources/img'
  into 'build/ref/img'
}

task makeReference(dependsOn: [formatBook,copyCSS,copyJS,copyImages]) {
  // nop
}

task zipDist(dependsOn: makeReference, type: Zip) {
  from('build/ref')
  into 'xmlcalabash-ref-' + version
  archiveName 'xmlcalabash-ref-' + version + ".zip"
}

task dist(dependsOn: zipDist) {
  // nop
}
